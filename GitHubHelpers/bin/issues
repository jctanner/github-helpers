#!/usr/bin/python
from cement.core import controller, backend, foundation, hook
from githubhelpers.issues import GithubIssues
from githubhelpers.issues3 import GithubIssues as GithubIssues3
import epdb

# define an application base controller
class IssuesBaseController(controller.CementBaseController):
    class Meta:
        label = 'base'
        description = "GitHub Helper Tools"
        #epilog = "This is the text at the bottom of --help."

        arguments = [
            (['--no-cache'], dict(action='store_true', help='ignore requests cache')),
            (['--closed'], dict(action='store_true', help='closed tickets instead of open')),
            (['--html'], dict(action='store_true', help='output in html format')),
            (['-r', '--repo'], dict(action='store', help='github repo url')),
            (['-s', '--sort-key'], dict(action='store', 
                    help='sortby issue property keyname')),
            (['--username'], dict(action='store', help='github username')),
            (['--password'], dict(action='store', help='github password')),
            (['--token'], dict(action='store', help='github token')),
            (['--outputdir'], dict(action='store', help='where to store files')),
            ]

    @controller.expose(help="show all issues")
    def showall(self):
        gh = GithubIssues(cli=self)
        gh.show_all()

    '''
    @controller.expose(help="list sortable keys for issues")
    def showkeys(self):
        gh = GithubIssues(cli=self)
        gh.show_closed()
    '''

    '''
    @controller.expose(help="show all closed issues")
    def showclosed(self):
        gh = GithubIssues(cli=self)
        gh.show_closed()
    '''

    '''
    @controller.expose(help="show all pull requests")
    def showprs(self):
        gh = GithubIssues(cli=self)
        gh.show_pr_sorted(sort_by=self.pargs.sort_key)
        #gh.show_all()
    '''

    ############
    # PRs
    ############

    # showprfiles showprusers showunlabeled showbadcloud showunprioritized

    @controller.expose(help="run all working reports")
    def runreports(self):
        from githubhelpers.reports import OpenIssueReports
        irs = OpenIssueReports(cli=self)
        irs.show_pr_by_file()
        irs.show_pr_by_users()
        irs.show_unlabeled_cloud()
        irs.show_unprioritized()
        irs.show_unlabeled()

    ############
    # PRs
    ############

    @controller.expose(help="show all pull requests sorted by filepath")
    def showprfiles(self):
        from githubhelpers.reports import OpenIssueReports
        prs = OpenIssueReports(cli=self)
        prs.show_pr_by_file()

    @controller.expose(help="show all pull requests sorted by user")
    def showprusers(self):
        from githubhelpers.reports import OpenIssueReports
        prs = OpenIssueReports(cli=self)
        prs.show_pr_by_users()

    @controller.expose(help="show all pull requests with merge commits")
    def showprmergecommits(self):
        from githubhelpers.reports import OpenIssueReports
        prs = OpenIssueReports(cli=self)
        prs.show_pr_merge_commits()

    @controller.expose(help="show all pull requests with merge conflicts")
    def showprmergeconflicts(self):
        from githubhelpers.pullrequests import PullRequests
        prs = PullRequests(cli=self)
        prs.check_merge_conflicts()

    @controller.expose(help="show all pull requests sorted by number of commits")
    def showprcommitcount(self):
        from githubhelpers.reports import OpenIssueReports
        prs = OpenIssueReports(cli=self)
        prs.show_pr_commit_count()

    @controller.expose(help="show all closed issues")
    def showclosed(self):
        gh = GithubIssues(cli=self)
        gh.show_closed()

    ############
    # LABELS
    ############

    @controller.expose(help="show unprioritized issues")
    def showunprioritized(self):
        from githubhelpers.reports import OpenIssueReports
        r = OpenIssueReports(cli=self)
        r.show_unprioritized()
 
    @controller.expose(help="show unlabeled issues")
    def showunlabeled(self):
        from githubhelpers.reports import OpenIssueReports
        r = OpenIssueReports(cli=self)
        r.show_unlabeled()
 
    @controller.expose(help="show all unlabeled cloud issues")
    def showbadcloud(self):
        from githubhelpers.reports import OpenIssueReports
        r = OpenIssueReports(cli=self)
        r.show_unlabeled_cloud()

    ############
    # STATS
    ############

    @controller.expose(help="create csv of open and closure rates")
    def showrates(self):
        from githubhelpers.reports import TicketRates
        tr = TicketRates(cli=self)

    ############
    # ONE OFFS
    ############

    @controller.expose(help="create list of closure messages")
    def showcomments(self):
        from githubhelpers.reports import CommentReport
        cr = CommentReport(cli=self)

app = foundation.CementApp('issues', base_controller=IssuesBaseController)

try:
    app.setup()
    app.config.parse_file('~/github.cfg')
    app.run()
finally:
    app.close()

